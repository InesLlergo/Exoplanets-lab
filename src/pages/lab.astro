---
// --- INICIA EL FRONTMATTER DE ASTRO ---
// Esta área entre las líneas '---' es el "frontmatter". Aquí puedes escribir JavaScript
// que se ejecuta en el servidor para preparar tu página. Por ejemplo, puedes importar
// componentes, obtener datos de una API, o definir variables.

// Aquí importamos el componente 'Layout'. En Astro, los layouts son como plantillas
// que definen la estructura común de tus páginas (como el <html>, <head>, <body>, etc.).
// Así no tienes que repetir ese código en cada página.
import Layout from '../layouts/Layout.astro';
// --- TERMINA EL FRONTMATTER DE ASTRO ---
---

<Layout title="Laboratorio de Tránsito - Simulación Completa">
  
  <style is:global>
    body { display: block; overflow-x: hidden; }
  </style>

  <style>
    /* --- ESTILOS DE LOS BOTONES --- */
    .btn-container {
      display: flex;
      gap: 0.75rem; /* 12px */
    }

    .btn {
      width: 100%;
      padding: 0.75rem 1rem;
      font-size: 1rem;
      font-weight: 600;
      border: none;
      border-radius: 0.5rem; /* 8px */
      cursor: pointer;
      transition: background-color 0.2s ease-in-out, transform 0.1s ease-in-out;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }

    .btn:active {
      transform: scale(0.98);
    }

    /* Estilo del botón primario (Play/Pausa) */
    .btn-primary {
      background-color: #6366f1; /* Indigo 500 */
      color: white;
    }

    .btn-primary:hover {
      background-color: #4f46e5; /* Indigo 600 */
    }
    
    /* Estilo del botón secundario (Reiniciar) */
    .btn-secondary {
      background-color: rgba(75, 85, 99, 0.5); /* Gray 600 con transparencia */
      color: #d1d5db; /* Gray 300 */
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .btn-secondary:hover {
      background-color: rgba(107, 114, 128, 0.5); /* Gray 500 con transparencia */
    }


    /* Estilos generales del laboratorio (sin cambios) */
    .lab-page{width:100%;min-height:100vh;padding:1.5rem;box-sizing:border-box;display:flex;flex-direction:column;animation:fadeIn .8s ease-in-out}@keyframes fadeIn{from{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}.lab-header{text-align:center;margin-bottom:2rem;flex-shrink:0}.lab-header h1{font-size:clamp(1.8rem, 4vw, 2.5rem);margin-bottom:.5rem}.lab-header p{max-width:700px;color:#9ca3af;margin:0 auto 1.5rem;font-size:clamp(.9rem, 2vw, 1rem)}.lab-grid{display:grid;grid-template-columns:1fr 340px;gap:2rem;width:100%;max-width:1600px;margin:0 auto;flex-grow:1}@media (max-width: 960px){.lab-page{padding:1rem}.lab-grid{grid-template-columns:1fr}.ui-panel{order:-1}}.simulation-wrapper{display:flex;flex-direction:column;gap:1rem;min-width:0}.canvas-container{position:relative;background:#071025;border-radius:12px;box-shadow:0 8px 25px rgba(0,0,0,.5);overflow:hidden}#view{width:100%;aspect-ratio:1 / 1}#plot{width:100%;aspect-ratio:3 / 1}.ui-panel{background:rgba(17,24,39,.6);backdrop-filter:blur(12px);border:1px solid rgba(255,255,255,.1);border-radius:1rem;padding:1.5rem;display:flex;flex-direction:column;gap:1rem;height:fit-content}.ui-panel fieldset{border:1px solid rgba(255,255,255,.1);border-radius:.5rem;padding:1rem;margin:0;display:flex;flex-direction:column;gap:.75rem}.ui-panel legend{padding:0 .5rem;font-size:1rem;font-weight:600;color:#9ca3af}.control-row{display:grid;grid-template-columns:1fr auto;align-items:center}.control-row label{font-size:.9rem;color:#d1d5db}input[type=range]{-webkit-appearance:none;appearance:none;width:100%;grid-column:1 / -1;margin-top:.25rem;background:transparent}input[type=range]:focus{outline:0}input[type=range]::-webkit-slider-runnable-track{height:6px;background:rgba(0,0,0,.3);border-radius:3px}input[type=range]::-webkit-slider-thumb{-webkit-appearance:none;height:18px;width:18px;border-radius:50%;background:#6366f1;cursor:pointer;margin-top:-6px;border:2px solid #e0e7ff}#results{background:rgba(0,0,0,.2);padding:1rem;border-radius:.5rem;font-size:.85rem;line-height:1.7;border-left:3px solid #6366f1}.lab-footer{width:100%;text-align:center;margin-top:auto;padding-top:2rem;color:#6b7280;font-size:.9rem}a.back-btn{text-decoration:none}.description-text{font-size:.85rem;color:#9ca3af;text-align:center;padding:0 1rem .5rem}
  </style>

  <div class="lab-page">
    <header class="lab-header">
      <h1>Simulador de Tránsito Exoplanetario</h1>
      <p>Una herramienta interactiva para visualizar el método de tránsito, una técnica clave en la detección de planetas fuera de nuestro sistema solar.</p>
      <a href="/" class="back-btn">Volver al Menú Principal</a>
    </header>

    <main class="lab-grid">
      <div class="simulation-wrapper">
        <div class="canvas-container"><canvas id="view"></canvas></div>
        <div class="canvas-container"><canvas id="plot"></canvas></div>
      </div>

      <aside class="ui-panel">
        <div class="btn-container">
          <button id="playBtn" class="btn btn-primary">▶️ Reproducir</button>
          <button id="resetBtn" class="btn btn-secondary">↺ Reiniciar</button>
        </div>
        
        <fieldset>
          <legend>Simulación</legend>
          <div class="control-row">
            <label for="speedSlider">Velocidad (días/segundo)</label>
            <span id="speedVal">50</span>
          </div>
          <input id="speedSlider" type="range" min="1" max="500" step="1" value="50">
        </fieldset>

        <fieldset>
          <legend>Planeta</legend>
          <div class="control-row"><label for="radiusSlider">Radio (R⊕)</label><span id="radiusVal">1</span></div>
          <input id="radiusSlider" type="range" min="0.1" max="20" step="0.1" value="1">
          <div class="control-row"><label for="periodSlider">Periodo (días)</label><span id="periodVal">365</span></div>
          <input id="periodSlider" type="range" min="10" max="2000" value="365">
          <div class="control-row"><label for="semiMajorAxisSlider">Semieje Mayor (AU)</label><span id="semiMajorAxisVal">1</span></div>
          <input id="semiMajorAxisSlider" type="range" min="0.1" max="5" step="0.01" value="1">
          <div class="control-row"><label for="inclinationSlider">Inclinación (°)</label><span id="inclinationVal">90</span></div>
          <input id="inclinationSlider" type="range" min="80" max="90" step="0.1" value="90">
        </fieldset>
        
        <fieldset>
          <legend>Estrella central</legend>
          <div class="control-row"><label for="starRadiusSlider">Radio estelar (R☉)</label><span id="starRadiusVal">1</span></div>
          <input id="starRadiusSlider" type="range" min="0.5" max="2" step="0.01" value="1">
        </fieldset>
        
        <p class="description-text">La gráfica muestra el brillo relativo y los tránsitos detectados.</p>
        <div id="results">Esperando datos...</div>
      </aside>
    </main>

    <footer class="lab-footer">Laboratorio Interactivo de Aventura Espacial</footer>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      
      const AU = 1.496e11;
      const R_SUN = 6.957e8;
      const R_EARTH = 6.371e6;
      const T_SUN = 5778;

      const viewCanvas = document.getElementById('view');
      const plotCanvas = document.getElementById('plot');
      const viewCtx = viewCanvas.getContext('2d');
      const plotCtx = plotCanvas.getContext('2d');
      const resultsDiv = document.getElementById('results');
      const playBtn = document.getElementById('playBtn');
      const resetBtn = document.getElementById('resetBtn');
      
      const sliders = {
        speed: document.getElementById('speedSlider'), planetRadius: document.getElementById('radiusSlider'), period: document.getElementById('periodSlider'),
        semiMajorAxis: document.getElementById('semiMajorAxisSlider'), inclination: document.getElementById('inclinationSlider'), starRadius: document.getElementById('starRadiusSlider'),
      };
      const valueSpans = {
        speed: document.getElementById('speedVal'), planetRadius: document.getElementById('radiusVal'), period: document.getElementById('periodVal'),
        semiMajorAxis: document.getElementById('semiMajorAxisVal'), inclination: document.getElementById('inclinationVal'), starRadius: document.getElementById('starRadiusVal'),
      };

      // Guardamos los valores por defecto para usarlos en la función de reinicio.
      const defaultValues = {
        speed: 50, radius: 1, period: 365, semiMajorAxis: 1, inclination: 90, starRadius: 1,
      };

      let isPlaying = false;
      let orbitalAngle_rad = 0;
      let lastTimestamp = 0;
      let fluxData = [];
      const maxFluxPoints = 800;
      const systemParams = {
        simulationSpeed: 50,
        planet: { radius_R_earth: 1, period_days: 365, semiMajorAxis_AU: 1, color: "#4ec9ff" },
        star: { radius_R_sun: 1 },
        inclination_rad: 90 * (Math.PI / 180),
      };

      // --- FUNCIONES DE LA SIMULACIÓN ---
      function getPlanetPosition(angle_rad, semiMajorAxis_AU) { /* ...código sin cambios... */ const x=semiMajorAxis_AU*Math.cos(angle_rad),y=semiMajorAxis_AU*Math.sin(angle_rad)*Math.cos(systemParams.inclination_rad),z=semiMajorAxis_AU*Math.sin(angle_rad)*Math.sin(systemParams.inclination_rad);return{x,y,z}}
      function circleOverlapArea(r1, r2, dist) { /* ...código sin cambios... */ if(dist>=r1+r2)return 0;if(dist<=Math.abs(r1-r2))return Math.PI*Math.min(r1,r2)**2;const r1_sq=r1*r1,r2_sq=r2*r2,dist_sq=dist*dist,angle1=Math.acos((dist_sq+r1_sq-r2_sq)/(2*dist*r1)),angle2=Math.acos((dist_sq+r2_sq-r1_sq)/(2*dist*r2));return r1_sq*angle1+r2_sq*angle2-.5*Math.sqrt((-dist+r1+r2)*(dist+r1-r2)*(dist-r1+r2)*(dist+r1+r2))}
      function computeFlux(angle_rad) { /* ...código sin cambios... */ const{y,z}=getPlanetPosition(angle_rad,systemParams.planet.semiMajorAxis_AU),projectedDist_AU=Math.hypot(y,z),starRadius_m=systemParams.star.radius_R_sun*R_SUN,planetRadius_m=systemParams.planet.radius_R_earth*R_EARTH,projectedDist_m=projectedDist_AU*AU,overlapArea_m2=circleOverlapArea(starRadius_m,planetRadius_m,projectedDist_m),starArea_m2=Math.PI*starRadius_m*starRadius_m;return 1-overlapArea_m2/starArea_m2}
      function analyzeAndDisplayResults() { /* ...código sin cambios... */ if(fluxData.length===0){resultsDiv.innerHTML="Esperando datos...";return}const minFlux=Math.min(...fluxData),transitDepth=1-minFlux,starRadius_m=systemParams.star.radius_R_sun*R_SUN,estimatedPlanetRadius_m=Math.sqrt(transitDepth)*starRadius_m,estimatedPlanetRadius_R_earth=estimatedPlanetRadius_m/R_EARTH;let planetType;estimatedPlanetRadius_R_earth<1.5?planetType="Rocoso (Terrestre)":estimatedPlanetRadius_R_earth<4?planetType="Gaseoso (Neptuniano)":planetType="Gigante Gaseoso (Joviano)";const semiMajorAxis_m=systemParams.planet.semiMajorAxis_AU*AU,equilibriumTemp_K=T_SUN*Math.sqrt(starRadius_m/(2*semiMajorAxis_m))*Math.pow(1-.3,.25);resultsDiv.innerHTML=`<strong>Radio estimado:</strong> ${estimatedPlanetRadius_R_earth.toFixed(2)} R⊕<br><strong>Tipo:</strong> ${planetType}<br><strong>Profundidad:</strong> ${(transitDepth*100).toFixed(4)} %<br><strong>Temp. Equilibrio:</strong> ${equilibriumTemp_K.toFixed(0)} K`}
      function drawPlot() { /* ...código sin cambios... */ plotCtx.clearRect(0,0,plotCanvas.width,plotCanvas.height);if(fluxData.length<2)return;plotCtx.strokeStyle="rgba(167, 139, 250, 1)";plotCtx.lineWidth=2;const w=plotCanvas.width,h=plotCanvas.height,numPoints=fluxData.length,minFlux=Math.min(...fluxData),fluxRange=1-minFlux,yMin=minFlux-.1*fluxRange,yMax=1+.1*fluxRange;plotCtx.beginPath();for(let i=0;i<numPoints;i++){const x=i/(maxFluxPoints-1)*w,y=h-(fluxData[i]-yMin)/(yMax-yMin)*h;i===0?plotCtx.moveTo(x,y):plotCtx.lineTo(x,y)}plotCtx.stroke()}
      function drawView() { /* ...código sin cambios... */ viewCtx.clearRect(0,0,viewCanvas.width,viewCanvas.height);const centerX=viewCanvas.width/2,centerY=viewCanvas.height/2,scale=Math.min(viewCanvas.width,viewCanvas.height)/(2.5*2),starRadius_px=Math.max(10,scale*.2*systemParams.star.radius_R_sun),gradient=viewCtx.createRadialGradient(centerX,centerY,starRadius_px*.1,centerX,centerY,starRadius_px);gradient.addColorStop(0,"#fff");gradient.addColorStop(.8,"#ffd28f");gradient.addColorStop(1,"#ffad57");viewCtx.fillStyle=gradient;viewCtx.beginPath();viewCtx.arc(centerX,centerY,starRadius_px,0,2*Math.PI);viewCtx.fill();const orbitRadiusX_px=systemParams.planet.semiMajorAxis_AU*scale,orbitRadiusY_px=orbitRadiusX_px*Math.cos(systemParams.inclination_rad);viewCtx.strokeStyle="rgba(255, 255, 255, 0.15)";viewCtx.setLineDash([5,10]);viewCtx.beginPath();viewCtx.ellipse(centerX,centerY,orbitRadiusX_px,orbitRadiusY_px,0,0,2*Math.PI);viewCtx.stroke();viewCtx.setLineDash([]);const planetX_px=centerX+orbitRadiusX_px*Math.cos(orbitalAngle_rad),planetY_px=centerY+orbitRadiusY_px*Math.sin(orbitalAngle_rad),planetRadius_px=Math.max(2,starRadius_px*(systemParams.planet.radius_R_earth*R_EARTH)/(systemParams.star.radius_R_sun*R_SUN));viewCtx.fillStyle=systemParams.planet.color;viewCtx.beginPath();viewCtx.arc(planetX_px,planetY_px,planetRadius_px,0,2*Math.PI);viewCtx.fill()}
      
      function animationLoop(currentTimestamp) {
        if (lastTimestamp === 0) lastTimestamp = currentTimestamp;
        const deltaTime_s = (currentTimestamp - lastTimestamp) / 1000;
        lastTimestamp = currentTimestamp;
        if (isPlaying) {
          const elapsed_days = deltaTime_s * systemParams.simulationSpeed;
          const period_days = systemParams.planet.period_days;
          if (period_days > 0) orbitalAngle_rad += (elapsed_days / period_days) * 2 * Math.PI;
          if (orbitalAngle_rad >= 2 * Math.PI) orbitalAngle_rad -= 2 * Math.PI;
          fluxData.push(computeFlux(orbitalAngle_rad));
          if (fluxData.length > maxFluxPoints) fluxData.shift();
        }
        drawView();
        drawPlot();
        analyzeAndDisplayResults();
        requestAnimationFrame(animationLoop);
      }
      
      function updateFromUI() {
        systemParams.simulationSpeed = Number(sliders.speed.value);
        systemParams.planet.radius_R_earth = Number(sliders.planetRadius.value);
        systemParams.planet.period_days = Number(sliders.period.value);
        systemParams.planet.semiMajorAxis_AU = Number(sliders.semiMajorAxis.value);
        systemParams.star.radius_R_sun = Number(sliders.starRadius.value);
        systemParams.inclination_rad = Number(sliders.inclination.value) * (Math.PI / 180);
        valueSpans.speed.textContent = sliders.speed.value;
        valueSpans.planetRadius.textContent = sliders.planetRadius.value;
        valueSpans.period.textContent = sliders.period.value;
        valueSpans.semiMajorAxis.textContent = sliders.semiMajorAxis.value;
        valueSpans.inclination.textContent = sliders.inclination.value;
        valueSpans.starRadius.textContent = sliders.starRadius.value;
      }
      
      function resizeCanvases() {
        [viewCanvas, plotCanvas].forEach(canvas => { canvas.width = canvas.clientWidth; canvas.height = canvas.clientHeight; });
      }

      // --- LISTENERS DE EVENTOS ---
      playBtn.addEventListener('click', () => {
        isPlaying = !isPlaying;
        playBtn.innerHTML = isPlaying ? "⏸️ Pausar" : "▶️ Reproducir";
        if (isPlaying) lastTimestamp = performance.now();
      });

      // FUNCIONALIDAD DE REINICIO MEJORADA
      resetBtn.addEventListener('click', () => {
        // 1. Pausar la simulación
        isPlaying = false;
        playBtn.innerHTML = "▶️ Reproducir";

        // 2. Reiniciar el estado de la animación
        orbitalAngle_rad = 0;
        fluxData = [];

        // 3. Restaurar los sliders a sus valores por defecto
        sliders.speed.value = defaultValues.speed;
        sliders.planetRadius.value = defaultValues.radius;
        sliders.period.value = defaultValues.period;
        sliders.semiMajorAxis.value = defaultValues.semiMajorAxis;
        sliders.inclination.value = defaultValues.inclination;
        sliders.starRadius.value = defaultValues.starRadius;
        
        // 4. Actualizar el estado interno y los textos de la UI con los valores reseteados
        updateFromUI();
      });

      Object.values(sliders).forEach(slider => slider.addEventListener('input', updateFromUI));
      window.addEventListener('resize', resizeCanvases);

      // --- INICIO ---
      resizeCanvases();
      updateFromUI();
      requestAnimationFrame(animationLoop);
    });
  </script>
</Layout>